#!/bin/bash
if [ "$(whoami)" != 'root' ]; then
    echo "Error: This script must be run as the root user"
    exit 1
fi

if [ ! -f ".env" ]; then
    echo "Error: Config not present, please copy .env.example to .env"
    exit 1
fi

if [ ! -f ".s3cfg" ]; then
    echo "Error: s3cmd has not been configured, please copy .s3cfg.example to .s3cfg"
    exit 1
fi

if [ ! -e "/usr/bin/s3cmd" ]; then
    echo "Error: s3cmd not found, please run setup"
    exit 1
fi

source ".env"

# Timestamp (sortable AND readable)
datetime=`date +"%Y-%m-%d-%H%M"`
datefolder=`date +"%y%m %B %Y"`

printf "backup started @ \e[1;33m%s\e[00m\n" `date +"%H:%m"`

# File backups
if [ "$file_backups" = true ]; then
    # Define our filenames
    filename="$datetime-files.tar.gz"
    tmpfile="/tmp/$filename"
    starttime=$(date +%s)
    if [ -n "$notify_url" ]; then
        printf "pinging \e[0;36m%s\e[00m...\n" $notify_url
        servertime=$(date)
        curl --silent -X POST -d "event=backup_started&bucket=$bucket&type=files&path=$serverid/$datefolder/$filename&file=$filename&folder=$datefolder&serverid=$serverid&servertime=$servertime" $notify_url > /dev/null
    fi

    # Dump and zip
    printf "creating \e[0;36m%s\e[00m...\n" $tmpfile
    backupcmd="tar -czf $tmpfile"
    if [ -n "$file_excludes" ]; then
        for exclude in $file_excludes
        do
            backupcmd="$backupcmd --exclude='$exclude'"
        done
    fi
    backupcmd="$backupcmd $file_folders"
    output=`$backupcmd`

    # upload
    printf "uploading \e[0;36m%s\e[00m to \e[0;35m%s\e[00m...\n" $tmpfile "s3://$bucket/$serverid/$datefolder/$filename"
    s3cmd --config=".s3cfg" put "$tmpfile" "s3://$bucket/$serverid/$datefolder/$filename"

    # notify
    if [ -n "$notify_url" ]; then
        timetaken=$[$(date +%s)-$starttime]
        filesize=`wc -c < $tmpfile`
        printf "pinging \e[0;36m%s\e[00m...\n" $notify_url
        servertime=$(date)
        curl --silent -X POST -d "event=backup_complete&bucket=$bucket&type=files&path=$serverid/$datefolder/$filename&file=$filename&folder=$datefolder&serverid=$serverid&servertime=$servertime&duration=$timetaken&size=$filesize" $notify_url > /dev/null
    fi

    # delete
    printf "removing temporary file \e[0;36m%s\e[00m...\n" $tmpfile
    rm -f "$tmpfile"
fi

# Database backups
if [ "$db_backups" = true ]; then
    # make sure mysql can connect
    mysqltest=$(mysql -u "$db_user" --password="$db_pass" -e "SELECT 'MYSQLOK';" 2>&1;)
    if [[ "$mysqltest" != *"MYSQLOK"* ]]; then
        echo "error: unable to connect to the MySQL server.";
        exit 1
    fi

    # if all databases, crawl databases
    if [ $db_databases = "all" ]; then
        db_databases=`mysql -u "$db_user" --password="$db_pass" -e "SHOW DATABASES;" | tr -d "| " | grep -v "\(Database\|information_schema\|innodb\|tmp\|performance_schema\|mysql\|test\)"`
    fi

    starttime=$(date +%s)

    # ping server
    if [ -n "$notify_url" ]; then
        printf "pinging \e[0;36m%s\e[00m...\n" $notify_url
        servertime=$(date)
        curl --silent -X POST -d "event=backup_started&bucket=$bucket&type=database&serverid=$serverid&servertime=$servertime" $notify_url > /dev/null
    fi

    # loop the databases
    for db in $db_databases; do

        # define our filenames
        filename="$datetime-$db.sql.gz"
        tmpfile="/tmp/$filename"

        # export & save
        printf "exporting database \e[0;36m%s\e[00m to \e[0;35m%s\e[00m...\n" $db $tmpfile
        mysqldump -u "$db_user" --password="$db_pass" --single-transaction --force --opt --databases "$db" | gzip -c -9 > "$tmpfile"

        # upload to s3
        printf "uploading \e[0;36m%s\e[00m to \e[0;35m%s\e[00m...\n" $tmpfile "s3://$bucket/$serverid/$datefolder/$filename"
        s3cmd --config=".s3cfg" put "$tmpfile" "s3://$bucket/$serverid/$datefolder/$filename"

        # delete
        printf "removing temporary file \e[0;36m%s\e[00m...\n" $tmpfile
        rm -f "$tmpfile"

    done;

    if [ -n "$notify_url" ]; then
        timetaken=$[$(date +%s)-$starttime]
        servertime=$(date)
        filename="$datetime-DB.sql.gz"
        printf "pinging \e[0;36m%s\e[00m...\n" $notify_url
        curl --silent -X POST -d "event=backup_complete&bucket=$bucket&type=database&path=$serverid/$datefolder/$filename&file=$filename&folder=$datefolder&serverid=$serverid&servertime=$servertime&duration=$timetaken&databases=$db_databases" $notify_url > /dev/null
    fi
fi

printf "backup complete @ \e[1;32m%s\e[00m\n" `date +"%H:%m"`