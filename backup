#!/bin/bash
# if [ "$(whoami)" != 'root' ]; then
#     echo "Error: This script must be run as the root user"
#     exit 1
# fi

if [ ! -f ".env" ]; then
    echo "Error: Config not present, please copy .env.example to .env"
    exit 1
fi

if [ ! -f ".s3cmd" ]; then
    echo "Error: s3cmd has not been configured, please copy .s3cmd.example to .s3cmd"
    exit 1
fi

# if [ ! -e "/usr/bin/s3cmd" ]; then
#     echo "Error: s3cmd not found, please run setup"
#     exit 1
# fi

source ".env"

# Timestamp (sortable AND readable)
datetime=`date +"%Y-%m-%d-%H%M"`
datefolder=`date +"%y%m %B %Y"`

printf "backup started @ \e[1;33m%s\e[00m\n" `date +"%H:%m"`

if [ "$file_backups" = true ]; then
    # Define our filenames
    filename="$datetime-files.tar.gz"
    tmpfile="/tmp/$filename"
    starttime=$(date +%s)
    if [ -n "$notify_url" ]; then
        printf "pinging \e[0;36m%s\e[00m...\n" $notify_url
        curl --silent -X POST -d "event=backup_started&type=files&path=$serverid/$datefolder/$filename&file=$filename&folder=$datefolder&serverid=$serverid" $notify_url > /dev/null
    fi

    # Dump and zip
    printf "creating \e[0;36m%s\e[00m...\n" $tmpfile
    backupcmd="tar -czf $tmpfile"
    if [ -n "$file_excludes" ]; then
        for exclude in $file_excludes
        do
            backupcmd="$backupcmd --exclude='$exclude'"
        done
    fi
    backupcmd="$backupcmd $file_folders"
    output=`$backupcmd`

    if [ -n "$notify_url" ]; then
        timetaken=$[$(date +%s)-$starttime]
        filesize=`wc -c < $tmpfile`
        printf "pinging \e[0;36m%s\e[00m...\n" $notify_url
        curl --silent -X POST -d "event=backup_complete&type=files&path=$serverid/$datefolder/$filename&file=$filename&folder=$datefolder&serverid=$serverid&time=$timetaken&size=$filesize" $notify_url > /dev/null
    fi
fi

# Upload
printf "uploading \e[0;36m%s\e[00m to \e[0;35m%s\e[00m...\n" $tmpfile "s3://$bucket/$serverid/$datefolder/$filename"
#s3cmd put "$tmpfile" "s3://$bucket/$serverid/$datefolder/$filename"

# Delete
printf "removing temporary file \e[0;36m%s\e[00m...\n" $tmpfile
# rm -f "$tmpfile"

printf "backup complete @ \e[1;32m%s\e[00m\n" `date +"%H:%m"`
